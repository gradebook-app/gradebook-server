version: 2.1
orbs:
  orb-tools: circleci/orb-tools@8.26.0
commands:
  doctl_initialize:
    description: Initilize the digitalocean CLI
    parameters:
      digitalocean-access-token:
        default: DIGITALOCEAN_ACCESS_TOKEN
        description: |
          Name of environment variable storing the digitalocean v2 api access token
        type: env_var_name
    steps:
      - orb-tools/check-env-var-param:
          command-name: Checking whether required env vars are set to initialize doctl
            CLI...
          param: <<parameters.digitalocean-access-token>>
      - run:
          command: |
            doctl auth init -t $<<parameters.digitalocean-access-token>>
          name: Initialize doctl
  doctl_install:
    description: Install the doctl, if not available
    steps:
      - run:
          command: |
            install () {
              echo "Installing Doctl"
              # Set sudo to work whether logged in as root user or non-root user
              if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

              $SUDO rm -rf /var/lib/apt/lists/*

              if [[ $(command -v curl) == "" ]]; then
                $SUDO apt-get update && \
                  $SUDO apt-get -y install curl
              fi

              if [[ $(command -v jq) == "" ]]; then
                $SUDO apt-get update && \
                  $SUDO apt-get -y install jq
              fi

              # Get latest download link
              export LATEST_DOWNLOAD_LINK=$(curl --silent \
                "https://api.github.com/repos/digitalocean/doctl/releases/latest" | \
                  jq -r '.assets[] | select(.name|test(".*-linux-amd64.tar.gz")).browser_download_url')

              # Downlaod latest package
              curl -sL $LATEST_DOWNLOAD_LINK | tar -xzv -C /tmp

              # Install
              $SUDO mv /tmp/doctl /usr/local/bin
              $SUDO chmod +x /usr/local/bin/doctl
            }

            if [[ $(command -v doctl) == "" ]]; then
              install
            else
              echo "doctl is already installed."
            fi

            echo "Success! doctl has been installed; displaying version information:"
            doctl version
          name: Install latest doctl version, if not available

jobs:
  build:
    working_directory: /app
    parameters:
      digitalocean-access-token:
        default: DIGITALOCEAN_ACCESS_TOKEN
        description: The access token to connect DigitalOcean
        type: env_var_name
    docker:
      - image: cimg/base:2022.09
        environment:
          FCM_TOKEN: $FCM_TOKEN
          FERNET_KEY: $FERNET_KEY
          JWT_TOKEN: $JWT_TOKEN
          MONGO_URI: $MONGO_URI
          REDIS_URL: $REDIS_URL
          ENV_MODE: $ENV_MODE
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t gradebook-web .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar gradebook-web
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - doctl_install
      - doctl_initialize:
          digitalocean-access-token: <<parameters.digitalocean-access-token>>
      - run:
          name: Initialize doctl
          command: |
            doctl auth init -t $<<parameters.digitalocean-access-token>>
      - run:
          name: Login to Registry
          command: |
            doctl registry login
      - run: 
          name: push gradebook-web image 
          command: |
            if [ "$ {CIRCLE_BRANCH}" == "DigitalOcean" ]; then
              docker tag gradebook-web "registry.digitalocean.com/genesus/gradebook-web"
              docker push "registry.digitalocean.com/genesus/gradebook-web"
            fi
      
      
workflows:
  build_and_deploy:
    jobs:
      - build
        